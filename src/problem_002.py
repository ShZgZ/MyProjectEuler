"""Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

和訳
フィボナッチ数列において新しい項は直前の2つの項を足すことで得られる。1, 2から始めることで始めの10項は以下のようになる。

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

項の値が4,000,000を超えないフィボナッチ数列において、項の値が偶数値となるものの和を求めよ。
"""
import doctest


def main():
    """
    項の値が4,000,000を超えないフィボナッチ数列において、項の値が偶数値となるものの和を求める。
    """
    max_num = 4_000_000

    result = get_even_fibonacci_sum(max_num)
    print(f'項の値が{max_num}を超えないフィボナッチ数列において、項の値が偶数値となるものの和: {result}')


def get_even_fibonacci_sum(n: int, t1: int = 1, t2: int = 2) -> int:
    """
    項の値がnを超えないフィボナッチ数列において、項の値が偶数値となるものの和を求める。
    t1, t2の値が負の数である場合は処理が終了しない場合があるためエラーとする。

    :param n: フィボナッチ数列の値の最大値
    :param t1: 第1項の値
    :param t2: 第2項の値
    :return: 偶数値の総和

    >>> get_even_fibonacci_sum(n=10, t1=1, t2=2)
    10
    """
    if t1 < 0 or t2 < 0 or (t1 == 0 and t2 == 0):
        raise Exception('項の値は0以上の整数を設定して下さい。')
    count = 0
    # 第1,2項で最大値を超えていないか確認
    if n < t1:
        return count
    count += t1 if t1 % 2 == 0 else 0
    if n < t2:
        return count
    count += t2 if t2 % 2 == 0 else 0
    # フィボナッチ数列の取得処理
    t_i_minus_2 = t1
    t_i_minus_1 = t2
    t_i = t_i_minus_1 + t_i_minus_2
    while t_i < n:
        count += t_i if t_i % 2 == 0 else 0
        t_i_minus_2 = t_i_minus_1
        t_i_minus_1 = t_i
        t_i = t_i_minus_1 + t_i_minus_2

    return count


if __name__ == '__main__':
    doctest.testmod()
    main()  # 項の値が4000000を超えないフィボナッチ数列において、項の値が偶数値となるものの和: 4613732
